---
- name: break up the layer 3 network for EOS
  hosts: network
  become: yes
  vars_files:
    - ../vars/breakup-data.yml
  vars:
    intr_num: []
  tasks:

    - name: remove legacy layer3 data
      eos_l3_interfaces:
        config:
          - name: "{{ item.name }}"
        state: deleted
      loop: "{{ remove_layer3_data[inventory_hostname] }}"
      when: ansible_network_os == "eos"
    
    - name: get number from interfaces
      set_fact:
        intr_num: "{{ intr_num  + [item.name | regex_search('\\d+') | int] }}"
      loop: "{{ layer3_data[inventory_hostname]}}"
      when: 
      - ansible_network_os == "eos"
      - item.name is defined
      - item.name.startswith('eth')
     
    
    - name: Enable switchport 
      eos_command:
        commands:
          - enable
          - configure
          - interface ethernet  {{ item }}
          - no switchport
      loop: "{{ intr_num }}"
      when:
        - ansible_network_os == "eos"
   

    - name: configure interface descriptions
      eos_interfaces:
        config:
          - name: "{{ item.key}}"
            description: "{{ item.value.description}}"
            # enabled: true
      with_dict: "{{ interface_data[inventory_hostname] }}"
      when: ansible_network_os == "eos"


    - name: configure layer 3
      eos_l3_interfaces:
        config:
          - name: "{{ item.name }}"
            ipv4:
              - address: "{{ item.ipv4 }}"
      loop: "{{ layer3_data[inventory_hostname] }}"
      when: ansible_network_os == "eos"

- name: break up the layer 3 network for Aoscx
  hosts: network
  collections:
    - arubanetworks.aoscx
  vars:
    ansible_connection: arubanetworks.aoscx.aoscx
  vars_files:
    - ../vars/breakup-data.yml
  tasks:

    - name: Remove ipv4 ACL ROUTED-IN from VLAN (new method)
      aoscx_vlan_interface:
        vlan_id: 1
        acl_name: ipv4_acl
        acl_type: ipv4
        acl_direction: routed-in
        state: delete
      when: ansible_network_os == "arubanetworks.aoscx.aoscx"

    - name: configure interface descriptions
      aoscx_interface:
        name: "{{ item.key}}"
        description: "{{ item.value.description}}"
      with_dict: "{{ interface_data[inventory_hostname] }}"
      when: ansible_network_os == "arubanetworks.aoscx.aoscx"

    - name: configure layer 3
      aoscx_l3_interface:
        interface: "{{ item.name }}"
        ipv4: "{{ item.ipv4 }}"
      loop: "{{ layer3_data[inventory_hostname] }}"
      when: 
        - ansible_network_os == "arubanetworks.aoscx.aoscx"
        - item.name != "1/1/2"
        - item.name != "1/1/3"

  #  - name: Create VLAN Interface 1
  #    aoscx_vlan_interface:
  #      vlan_id: 1
  #      description: DEFAULT
  #      ipv4:
  #        - 172.16.2.2/30
  #    when: ansible_network_os == "arubanetworks.aoscx.aoscx"

  #  - name: Configure Interface 1/1/2 - vlan access 1
  #    aoscx_l2_interface:
  #      interface: 1/1/2
  #      vlan_mode: access
  #      vlan_access: 1
  #    when: ansible_network_os == "arubanetworks.aoscx.aoscx"
    